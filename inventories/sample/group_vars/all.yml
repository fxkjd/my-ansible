# ---------------------------- First setup config variables ---------------------------- #

# Local path of the public key you want to install in the server.
ssh_key: /path/to/id_rsa.pub

# User management information
# This is the user that is going to be created in the remote server
new_user: new_username 
# Password for root and the new user
# Password has to be the its crypted value
# For more info check: https://docs.ansible.com/ansible/latest/reference_appendices/faq.html#how-do-i-generate-encrypted-passwords-for-the-user-module
new_root_password: password_hash 
new_user_password: password_hash

# ---------------------------- First setup config variables ---------------------------- #


# ----------------------------- Logwatch config variables ------------------------------ #

telegram_bot_token: your_telegram_bot_token 
telegram_chat_id: your_telegram_chat_id 

# ----------------------------- Logwatch config variables ------------------------------ #

# ------------------------------ OpenVPN config variables ------------------------------ #

# `proto` and `port` where OpenVPN will listen at.
# `mask` and `cidr` refer to the subnets used for tunneling.
# `server_extra_options` defines config options added to the OpenVPN server config,
#  e.g. `push ...` or `client-to-client`.
# `client_extra_options` defines config options added to the OpenVPN client config.
openvpn_instances:
  - {
      proto: udp,
      port: 1194,
      mask: "10.9.0.0 255.255.255.0",
      cidr: "10.9.0.0/24",
      server_extra_options: ['push "redirect-gateway def1"'],
      client_extra_options: [],
  }
  # Uncomment below to listen on TCP 443. This will look like normal SSL/TLS traffic
  # and will be more likely to get through restrictive firewalls.
  # - {
  #     proto: tcp,
  #     port: 443,
  #     mask: "10.8.0.0 255.255.255.0",
  #     cidr: "10.8.0.0/24",
  #     server_extra_options: ['push "redirect-gateway def1"'],
  #     client_extra_options: [],
  # }

# path where fetched credentials are stored
local_creds_folder: "{{ playbook_dir }}/../fetched_creds/{{ openvpn_server_remote_host }}"

# This variable will be used as the `remote` directive in the OpenVPN configuration.
# So make sure this is resolvable by the clients.
# If this is not the case with `inventory_hostname`
openvpn_server_remote_host: "{{ inventory_hostname }}"

openvpn_server_common_name: "My-VPN"

openvpn_path: "/etc/openvpn"
openvpn_path_pki: "{{ openvpn_path }}/pki"
openvpn_path_keys: "{{ openvpn_path_pki }}/private"
openvpn_path_certs: "{{ openvpn_path_pki }}/issued"
openvpn_path_reqs: "{{ openvpn_path_pki }}/reqs"
openvpn_hmac_firewall: "{{ openvpn_path_pki }}/ta.key"
openvpn_ca_cert: "{{ openvpn_path_pki }}/ca.crt"
openvpn_path_easyrsa: "{{ openvpn_path }}/easyrsa/easyrsa3"
dhparams_size: "{{ openvpn_key_size }}"
dhparams_location: "{{ openvpn_path_pki }}/dh.pem"
openvpn_crl: "{{ openvpn_path_pki }}/crl.pem"
openvpn_server_common_name_file: "{{ openvpn_path }}/openvpn_server_common_name"

# Openvpn crypto config
openvpn_key_size: "4096"
openvpn_cipher: "AES-256-CBC"
openvpn_auth_digest: "SHA256"
# For all available ciphers use: openvpn --show-tls
# For all available PFS ciphers (without eliptic curve cryptography) use: openvpn --show-tls | grep -e "-DHE-"
# Configuration here just uses PFS ciphers leveraging AES256 and at least SHA256
openvpn_tls_cipher: "TLS-DHE-DSS-WITH-AES-256-GCM-SHA384:TLS-DHE-RSA-WITH-AES-256-GCM-SHA384:TLS-DHE-RSA-WITH-AES-256-CBC-SHA256:TLS-DHE-DSS-WITH-AES-256-CBC-SHA256"

openvpn_easyrsa_version: v3.0.3

# ------------------------------ OpenVPN config variables ------------------------------ #
